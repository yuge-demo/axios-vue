import axios from 'axios';
import service from './contactApi';
import { Toast } from 'vant';
//service 循环遍历输出不同的请求方法

let instance = axios.create({
    baseURL:'http://loaclhost:9000/api',
    timeout:1000
})
const Http = {} //包裹请求方法的容器

// 请求格式和参数的统一
for(let key in service){
    let api = service[key]; //url methods
    //axync 作用：避免进入回调地域   需要用道 try catch
    // axios.get().then(res=>{
    //     axios.get().then(res=>{
        
    //     })
    // }).catch()
    // Http[key] = async function(){
    //     let res = null
    //     try{
    //         res = await axios.get('url')              //await 后面是异步函数
    //     }catch(err){
    //         res = err
    //     }
    // }

    Http[key] = async function(
        params, //请求参数 get delete url    put post patch(data)
        isFormData=false, //标识是否是formdata请求
        config={}  //配置参数
    ){
        let newParams = {}
        //content-type是否是from-data的判断
        if(params && isFormData){
            newParams = new FormData()
            for(let i in params){
                newParams.append(i , params[i])
            }
        }else{
            newParams = params
        }
        // 不同请求的判断
        let response = {}; //请求的返回值
        if(api.method === 'put' || api.method === 'post' || api.method === 'patch'){
            try{
                await instance[api.method](api.url , newParams ,config)
            }catch(err){
                response = err
            }
        }else if(api.method === 'delete' || api.method === 'get'){
            config.params = newParams
            try{
                await instance[api.method](api.url , config)
            }catch(err){
                response = err
            }
        }
        return response; //返回请求响应值
    }
}

// 拦截器的添加
instance.interceptors.request.use(config=>{
    //发起请求做点什么
    Toast.loading({
        mask:false, //是否有阴影
        duration:0, //持续时间默认为一秒钟 为零就是一直存在
        forbidClick:true, //禁止点击
        message:'加载中...' //提示信息
    })
    return config
},()=>{
    //请求错误
    Toast.clear()
    Toast('请求错误，请稍候重试')
})

instance.interceptors.response.use(res => {
    //请求成功
    Toast.clear()
    return res.data
},()=>{
    //响应失败
    Toast.clear()
    Toast('请求错误，请稍候重试')
})

export default Http
